IoC : Inversion of Control (제어의 역행) : 객체 관리 제어의 이동 (개발자 ==> 스프링)
			             객체를 class 내에서 생성(new ) ==> 스프링의 bean 컨테이너로 이동 
  - Dependency Lookup
  - Depandency Injection : 	- Setter Injection		(Setter 를 통한 의존성 주입)
			- Constructor Injection 	(생성자를 통한 의존성 주입)


bean 생성 (객체 생성) : DI (의존성주입) 설정 
   - xml 기반 설정 방식
       - xml에 부하가 많이 걸린다. 
       - 중앙에서 쉽게 확인. 
       - 원본 java 소스를 수정하지 않고 , 수정은 xml에서 수정
       - 수정이 빈번하게 일어나는것은 xml 설정

   - @ : 어노테이션 설정 방식 
       - context [NameSpace]를 등록.
       - xml 에서 스캔할 패키지를 등록 

       - 설정을 찾기가 힘들다. 
       - xml에 부하를 분산. 
       - 쉽게 셋팅이 가능. 
       - java 소스 파일을 수정, 재컴파일. 
       - 수정이 일어나지 않는 경우 어노테이션 사용. 

@Component 
   - bean을 xml에 셋팅하지 않고 설정 
   - bean 생성을 할 클래스 위에 설정. 
   - id 나 name 을 설정하지 않을 경우 :
	객체이름으로 id나 name이 설정됨, 첫자가 소문자로 적용.
   - @Component("tv")

@Component 하위의 어노테이션 : 특수한 기능을 처리하는 클래스에 할당. 

   - @Service       : 비즈니스 로직을 처리하는 Service 클래스     : xxxServiceImpl
   - @Repository  :  데이터베이스 연동을 처리하는 DAO 클래스  : xxxDAO
   - @Controller   :  사용자 요청을 처리하는 Controller 클래스   : xxxController


의존성 주입(DI) 하는 어노테이션 : 생성자 나 셋터를 만들지 않고 사용
  1. @Autowired : 해당 타입의 객체를 검색해서 자동으로 의존성 주입(DI). 
	적용대상 : 생성자 위, 메소드 위, 변수 위 
  2. @Qualifier   : 객체 이름을 검색해서 의존성 주입(DI), 
	- @Autowired 하위에서 사용. 
  3. @Injec   : @Autowired 와 통일하게 객체 타입을 검색해서 의존성 주입	
  4. @Resource  : @Autowired + Qualifier 가 합해진 의존성 주입 
	name 을 사용. 



		<!-- H2 데이터 베이스 -->

		<dependency>
		   <groupId>com.h2database</groupId>
		   <artifactId>h2</artifactId>
		   <version>1.4.199</version>
		</dependency>

















